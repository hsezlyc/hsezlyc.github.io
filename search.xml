<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线性表</title>
      <link href="/2025/01/23/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2025/01/23/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="线性表">线性表</h3><table><thead><tr><th style="text-align:center">Part I</th><th style="text-align:center">Part II</th><th style="text-align:center">Part III</th><th style="text-align:center">Part IV</th><th style="text-align:center">Part V</th></tr></thead><tbody><tr><td style="text-align:center"><a href="#p1">顺序线性表</a></td><td style="text-align:center"><a href="#p2">单向链表</a></td><td style="text-align:center"><a href="#p3">双向链表</a></td><td style="text-align:center"><a href="#p4">循环链表</a></td><td style="text-align:center"><a href="#p5">三个案例分析</a></td></tr></tbody></table><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">顺序表</th><th style="text-align:center">链表</th></tr></thead><tbody><tr><td style="text-align:center">存储空间</td><td style="text-align:center">预先分配，可能会导致空间闲置或溢出</td><td style="text-align:center">动态分配，不会出现空间闲置或者溢出</td></tr><tr><td style="text-align:center">存储密度</td><td style="text-align:center">存储密度为1，逻辑关系等于存储关系，没有额外开销</td><td style="text-align:center">存储密度小于1，要借助指针域来表示元素之间的逻辑关系</td></tr><tr><td style="text-align:center">存取元素</td><td style="text-align:center">随机存取，按位置访问元素的时间复杂度O(1)</td><td style="text-align:center">顺序存取，访问某位置的元素的时间复杂度为O(n)</td></tr><tr><td style="text-align:center">插入、删除</td><td style="text-align:center">插入和删除都要移动大量的元素。平均移动元素约为表的一半。时间复杂度O(n)</td><td style="text-align:center">不需要移动元素，只需要改变指针位置，继而改变结点之间的链接关系。时间复杂度O(1)</td></tr><tr><td style="text-align:center">适用情况</td><td style="text-align:center">1.表长变化不大，或者事先就能确定变化的范围<br />2.很少进行插入和删除，需要下标访问元素</td><td style="text-align:center">1.长度变化较大<br />2.频繁的插入和删除</td></tr></tbody></table><p><span id="p1"><strong>==1. 顺序线性表==</strong></span></p><p><em>线性表的定义</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType elem[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125; SqList;</span><br></pre></td></tr></table></figure><p><em>线性表的初始化</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">InitList</span><span class="params">(SqList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    L-&gt;elem=(ElemType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType)*MAXSIZE);</span><br><span class="line">    <span class="keyword">if</span>(!L-&gt;elem)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>线性表的销毁</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DestroyList</span><span class="params">(SqList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;elem)</span><br><span class="line">        <span class="built_in">free</span>(L-&gt;elem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>线性表的清空</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CLearList</span><span class="params">(SqList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>判断线性表是否为空</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">IsEmpty</span><span class="params">(<span class="type">const</span> SqList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length!=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>线性表的取值</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">GetElem</span><span class="params">(<span class="type">const</span> SqList *L,<span class="type">const</span> <span class="type">int</span> i,ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;MAXSIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;out of range\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = L-&gt;elem[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>线性表的查找</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LocateList</span><span class="params">(<span class="type">const</span> SqList *L, <span class="type">const</span> ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;L-&gt;length; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(L.elem[i] == e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>; <span class="comment">//查找成功，返回其查找元素的第一个下标值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//未能找到对应元素，返回0</span></span><br><span class="line">    <span class="comment">//算法时间复杂度：O(n)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>线性表的插入</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">InsertList</span><span class="params">(SqList *L, <span class="type">const</span> ElemType *e, <span class="type">const</span> <span class="type">int</span> *i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//判断线性表长度是否小于最大长度MAXSIZE</span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == MAXSIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;can not insert!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;wrong insert position!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将位于插入位置之后的元素依次向后挪动一位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = L-&gt;length - <span class="number">1</span>; p &gt;= i; --p)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;elem[p + <span class="number">1</span>] = L-&gt;elem[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入元素</span></span><br><span class="line">    L-&gt;elem[i] = e;</span><br><span class="line">    <span class="comment">//线性表长度+1</span></span><br><span class="line">    L-&gt;length += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//算法时间复杂度：O(n)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>线性表的删除</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">EraseList</span><span class="params">(SqList *L, <span class="type">const</span> <span class="type">int</span> *i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//异常判断</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;L.length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;wrong erase position!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(L.length == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;List has no length\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将位于删除位置之后的元素依次向前挪动一位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> p = i + <span class="number">1</span>; p &lt; L.length; ++p)</span><br><span class="line">    &#123;</span><br><span class="line">        L.elem[p - <span class="number">1</span>] = L.elem[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线性表长度-1</span></span><br><span class="line">    L.length -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//算法时间复杂度：O(n)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span id="p2"><strong>==单向链表==</strong></span></p><p><em>链表的定义</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Lnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;<span class="comment">//结点的数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Lnode</span> *<span class="title">next</span>;</span><span class="comment">//结点的指针域</span></span><br><span class="line">&#125;Lnode;</span><br></pre></td></tr></table></figure><p><em>链表的初始化</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">InitList</span><span class="params">(Lnode *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    Lnode* L=(Lnode* )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode)); </span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;  <span class="comment">//空表，也就是说头结点的指针指向为空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>头插法创建单向链表</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreatListHead</span><span class="params">(Lnode *L, <span class="type">const</span> <span class="type">size_t</span> n,ElemType value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Lnode *p = (Lnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">        p-&gt;data=value;</span><br><span class="line">        p-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = p; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>尾插法创建单向链表</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreatListTail</span><span class="params">(Lnode *L, <span class="type">const</span> <span class="type">size_t</span> n,ElemType value)</span></span><br><span class="line">&#123;</span><br><span class="line">    Lnode *r = L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Lnode *p = (Lnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">        p-&gt;data=calue;</span><br><span class="line">        p-&gt;next = r-&gt;next;</span><br><span class="line">        r-&gt;next = p;</span><br><span class="line">        r = r-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>判断链表是否为空</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">IsEmpty</span><span class="params">(Lnode *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next)<span class="comment">//非空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>销毁链表</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">DestroyList</span><span class="params">(Lnode *L)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (IsEmpty(*L)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Empty List!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Lnode *p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        Lnode *temp = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(*L);</span><br><span class="line">    *L = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>统计链表长度</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">GetLength</span><span class="params">(Lnode *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    Lnode *p;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//算法的时间复杂度为O(n)</span></span><br></pre></td></tr></table></figure><p><em>取链表中第i个元素的值</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">GetElem</span><span class="params">(<span class="type">const</span> Lnode* L, <span class="type">const</span> <span class="type">int</span> *i, ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;out of range\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Lnode *p = L-&gt;next;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i + <span class="number">1</span>; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(!p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;out of range\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果此时p为空，意味着已经到达链表尾端，停止循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>按值查找链表</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(LinkList *L, ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    Lnode *p = L-&gt;next;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data == e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        ++cnt;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;not found\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>在链表中插入元素</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">InsertList</span><span class="params">(Lnode *L, <span class="type">const</span> <span class="type">int</span> *i, <span class="type">const</span> ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    Lnode *p = L;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; j &lt; i<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//异常判断</span></span><br><span class="line">    <span class="keyword">if</span>(!p || i&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;out of range\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Lnode* insert=(Lnode* )<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Lnode));</span><br><span class="line">    insert-&gt;data = e;</span><br><span class="line">    insert-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = insert;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//算法的时间复杂度为O(n)</span></span><br></pre></td></tr></table></figure><p><em><strong>删除链表的某个结点</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">EraseList</span><span class="params">(Lnode* L, <span class="type">const</span> <span class="type">int</span> *i)</span></span><br><span class="line">&#123;</span><br><span class="line">    Lnode *p = L;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(p-&gt;next) || i &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;out of range\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Lnode *q = p-&gt;next;</span><br><span class="line">    p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">    delete q;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>两个有序链表的合并</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MergeList</span><span class="params">(Lnode* La, Lnode* Lb, Lnode* Lc)</span></span><br><span class="line">&#123;</span><br><span class="line">    Lnode *pa = La-&gt;next;</span><br><span class="line">    Lnode *pb = Lb-&gt;next;</span><br><span class="line">    Lc = La;</span><br><span class="line">    Lnode *pc = Lc;</span><br><span class="line">    <span class="keyword">while</span> (pa &amp;&amp; pb)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pa-&gt;data &lt;= pb-&gt;data) <span class="comment">//尾插法，插入元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//pc的指针域指向小元素的地址</span></span><br><span class="line">            pc-&gt;next = pa;</span><br><span class="line">            <span class="comment">//移动pc指针，使得pc永远都指向最后链表Lc的最后一个元素</span></span><br><span class="line">            pc = pc-&gt;next;</span><br><span class="line">            <span class="comment">//pa的元素使用过后，要向后移动pa</span></span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//pc的指针域指向小元素的地址</span></span><br><span class="line">            pc-&gt;next = pb;</span><br><span class="line">            <span class="comment">//移动pc指针，使得pc永远都指向最后链表Lc的最后一个元素</span></span><br><span class="line">            pc = pc-&gt;next;</span><br><span class="line">            <span class="comment">//pb的元素使用过后，要向后移动pa</span></span><br><span class="line">            pb = pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上面的while循环执行完毕后，较长的链表还会余留一段元素，这段元素的起始地址就是pa（或pb</span></span><br><span class="line">    pc-&gt;next = (pa ? pa : pb);</span><br><span class="line">    <span class="comment">//链表合并完毕，释放Lb的头结点</span></span><br><span class="line">    <span class="built_in">free</span>(Lb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>​这个算法的时间复杂度为O(n)，但是空间复杂度为O(1)<br>​自我感觉，这个算法的思想十分巧妙。La和Lb是两条有序链表，众所周知链表的元素的逻辑关系是通过指针域实现的。这个算法巧妙的地方在于：不需要在堆区（heap）申请新的内存空间组成合并链表，而就根据原有元素的地址，重新构建一组逻辑关系。总而言之，就是通过改变现有结点指针的指向，构造出一条新的链表</p></blockquote><p><em><strong>稀疏多项式的相加</strong></em></p><blockquote><p>也即“合并两个有序链表”的变形</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SPO_II</span><span class="params">(Lnode* La,Lnode* Lb, Lnode* Lc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Lnode *pa = La-&gt;next;</span><br><span class="line">    Lnode *pb = Lb-&gt;next;</span><br><span class="line">    Lc = La;</span><br><span class="line">    Lnode *pc = Lc;</span><br><span class="line">    <span class="keyword">while</span>(pa &amp;&amp; pb)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pa-&gt;data.index &lt; pb-&gt;data.index)</span><br><span class="line">        &#123;</span><br><span class="line">            pc-&gt;next = pa;</span><br><span class="line">            pc = pc-&gt;next;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pa-&gt;data.index &gt; pb-&gt;data.index)</span><br><span class="line">        &#123;</span><br><span class="line">            pc-&gt;next = pb;</span><br><span class="line">            pc = pc-&gt;next;</span><br><span class="line">            pb = pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pa-&gt;data.index == pb-&gt;data.index)</span><br><span class="line">        &#123;</span><br><span class="line">            pa-&gt;data.coef += pb-&gt;data.coef;</span><br><span class="line">            pc-&gt;next = pa;</span><br><span class="line">            pc = pc-&gt;next;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">            pb = pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pc-&gt;next = (pa ? pa : pb);</span><br><span class="line">    <span class="built_in">free</span>(Lb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><span id="p3"><strong>循环链表</strong></span></p><p><em>循环链表的定义</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CLnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CLnode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;CircList;</span><br></pre></td></tr></table></figure><p><em>循环链表的初始化</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(CircList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    L =(CircList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CircList));</span><br><span class="line">    L-&gt;next = L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==循环链表的基本操作和单链表基本上相同，唯一不同的是，由于循环链表的最后一个结点的next不再是空指针，而是指向头结点，因此，循环中的结束条件要发生变化==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单链表--------------循环链表</span><br><span class="line"><span class="keyword">while</span>(p)---------&gt;<span class="keyword">while</span>(p!=L)</span><br><span class="line"><span class="keyword">while</span>(p-&gt;next)---&gt;<span class="keyword">while</span>(p-&gt;next!=L)</span><br></pre></td></tr></table></figure><p><span id="p4"><strong>双向链表</strong></span></p><p><em>双向链表的定义</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DuLnode</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    DuLnode *prior, *next;</span><br><span class="line">&#125; * DuLinkList;</span><br></pre></td></tr></table></figure><p><em>双向链表的初始化</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(DuLinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L = <span class="keyword">new</span> DuLnode;</span><br><span class="line">    L-&gt;prior = <span class="literal">nullptr</span>;</span><br><span class="line">    L-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>头插法创建双向链表</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreatListHead</span><span class="params">(DuLinkList &amp;L, <span class="type">const</span> <span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        DuLnode *p = <span class="keyword">new</span> DuLnode;</span><br><span class="line">        cin &gt;&gt; p-&gt;data;</span><br><span class="line">        p-&gt;prior = L;</span><br><span class="line">        p-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>尾插法创建双向链表</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreatListTail</span><span class="params">(DuLinkList &amp;L, <span class="type">const</span> <span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DuLnode *r = L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        DuLnode *p = <span class="keyword">new</span> DuLnode;</span><br><span class="line">        cin &gt;&gt; p-&gt;data;</span><br><span class="line">        p-&gt;prior = r;</span><br><span class="line">        p-&gt;next = r-&gt;next;</span><br><span class="line">        r-&gt;next = p;</span><br><span class="line">        r = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>在双向链表的第i个位置插入元素</strong></em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert_DuL</span><span class="params">(DuLinkList &amp;L, <span class="type">const</span> <span class="type">int</span> i, <span class="type">const</span> ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//移动指针到i处</span></span><br><span class="line">    DuLnode *p = L-&gt;next;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        ++j;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &lt; i || j &lt; <span class="number">1</span>) <span class="comment">//如果i在链表范围内，上面的while循环的终止条件就是j&lt;i</span></span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;out of range&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在堆区创建要插入的结点</span></span><br><span class="line">    DuLnode *s = <span class="keyword">new</span> DuLnode;</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    <span class="comment">//重新建立链接关系</span></span><br><span class="line">    s-&gt;prior = p-&gt;prior; <span class="comment">//第一步：s的前趋等于p的前趋</span></span><br><span class="line">    p-&gt;prior-&gt;next = s;  <span class="comment">//第二步，用p的前趋结点的next指向插入元素s，更改了第一条链</span></span><br><span class="line">    s-&gt;next = p;         <span class="comment">//第三步：s的后继指向p</span></span><br><span class="line">    p-&gt;prior = s;        <span class="comment">//第四步：p的前趋改为指向s，更改了第二条链</span></span><br><span class="line">    <span class="comment">//return</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>删除双向链表中的某个元素</strong></em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListErase_DuL</span><span class="params">(DuLinkList &amp;L, <span class="type">const</span> <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//移动指针到i处</span></span><br><span class="line">    DuLnode *p = L-&gt;next;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        ++j;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &lt; i || j &lt; <span class="number">1</span>) <span class="comment">//如果i在链表范围内，上面的while循环的终止条件就是j&lt;i</span></span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;out of range&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//改变链接关系</span></span><br><span class="line">    p-&gt;prior-&gt;next = p-&gt;next;<span class="comment">//p的前趋结点的next等于p的后继</span></span><br><span class="line">    <span class="keyword">if</span> ((p-&gt;next))<span class="comment">//如果删除的不是最后一个元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;next-&gt;prior = p-&gt;prior;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放p</span></span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="comment">//结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><span id="p5"><strong>三个案例分析</strong></span></p><blockquote><p>案例一：一元多项式运算</p><p>案例二：稀疏多项式运算</p><p>案例三：图书馆管理系统</p></blockquote><p><em><strong>案例一：一元多项式的合并 -顺序链表版</strong></em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PolyOperate</span><span class="params">(SqList &amp;L1, SqList &amp;L2, SqList &amp;L3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L<span class="number">1.l</span>ength &amp;&amp; i &lt; L<span class="number">2.l</span>ength; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        L<span class="number">3.</span>elem[i] = L<span class="number">1.</span>elem[i] + L<span class="number">2.</span>elem[i];</span><br><span class="line">        L<span class="number">3.l</span>ength += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (L<span class="number">1.l</span>ength &lt;= L<span class="number">2.l</span>ength)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = L<span class="number">1.l</span>ength; j &lt; L<span class="number">2.l</span>ength; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            L<span class="number">3.</span>elem[j] = L<span class="number">2.</span>elem[j];</span><br><span class="line">            L<span class="number">3.l</span>ength += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = L<span class="number">2.l</span>ength; j &lt; L<span class="number">1.l</span>ength; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            L<span class="number">3.</span>elem[j] = L<span class="number">1.</span>elem[j];</span><br><span class="line">            L<span class="number">3.l</span>ength += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>稀疏多项式的相加</strong></em></p><blockquote><p>也即“合并两个有序顺序表”的变形</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SQL_I</span><span class="params">(SqList &amp;L1, SqList &amp;L2, SqList &amp;L3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElemType *p1 = L<span class="number">1.</span>elem;</span><br><span class="line">    ElemType *p1_last = L<span class="number">1.</span>elem + L<span class="number">1.l</span>ength - <span class="number">1</span>;</span><br><span class="line">    ElemType *p2 = L<span class="number">2.</span>elem;</span><br><span class="line">    ElemType *p2_last = L<span class="number">2.</span>elem + L<span class="number">2.l</span>ength - <span class="number">1</span>;</span><br><span class="line">    ElemType *p3 = L<span class="number">3.</span>elem;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= p1_last &amp;&amp; p2 &lt;= p2_last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1-&gt;index &lt; p2-&gt;index)</span><br><span class="line">        &#123;</span><br><span class="line">            p3-&gt;index = p1-&gt;index;</span><br><span class="line">            p3-&gt;coef = p1-&gt;coef;</span><br><span class="line">            ++p1;</span><br><span class="line">            ++p3;</span><br><span class="line">            ++L<span class="number">3.l</span>ength;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p1-&gt;index &gt; p2-&gt;index)</span><br><span class="line">        &#123;</span><br><span class="line">            p3-&gt;index = p2-&gt;index;</span><br><span class="line">            p3-&gt;coef = p2-&gt;coef;</span><br><span class="line">            ++p2;</span><br><span class="line">            ++p3;</span><br><span class="line">            ++L<span class="number">3.l</span>ength;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p1-&gt;index == p2-&gt;index)</span><br><span class="line">        &#123;</span><br><span class="line">            p3-&gt;index = p1-&gt;index;</span><br><span class="line">            p3-&gt;coef = p1-&gt;coef + p2-&gt;coef;</span><br><span class="line">            ++p1;</span><br><span class="line">            ++p2;</span><br><span class="line">            ++p3;</span><br><span class="line">            ++L<span class="number">3.l</span>ength;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= p1_last)</span><br><span class="line">    &#123;</span><br><span class="line">        p3-&gt;index = p1-&gt;index;</span><br><span class="line">        p3-&gt;coef = p1-&gt;coef;</span><br><span class="line">        ++p1;</span><br><span class="line">        ++p3;</span><br><span class="line">        ++L<span class="number">3.l</span>ength;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2 &lt;= p2_last)</span><br><span class="line">    &#123;</span><br><span class="line">        p3-&gt;index = p2-&gt;index;</span><br><span class="line">        p3-&gt;coef = p2-&gt;coef;</span><br><span class="line">        ++p2;</span><br><span class="line">        ++p3;</span><br><span class="line">        ++L<span class="number">3.l</span>ength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>稀疏多项式的相加</strong></em></p><blockquote><p>也即“合并两个有序链表”的变形</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SPO_II</span><span class="params">(LinkList &amp;La, LinkList &amp;Lb, LinkList &amp;Lc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Lnode *pa = La-&gt;next;</span><br><span class="line">    Lnode *pb = Lb-&gt;next;</span><br><span class="line">    Lc = La;</span><br><span class="line">    Lnode *pc = Lc;</span><br><span class="line">    <span class="keyword">while</span>(pa &amp;&amp; pb)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pa-&gt;data.index &lt; pb-&gt;data.index)</span><br><span class="line">        &#123;</span><br><span class="line">            pc-&gt;next = pa;</span><br><span class="line">            pc = pc-&gt;next;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pa-&gt;data.index &gt; pb-&gt;data.index)</span><br><span class="line">        &#123;</span><br><span class="line">            pc-&gt;next = pb;</span><br><span class="line">            pc = pc-&gt;next;</span><br><span class="line">            pb = pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pa-&gt;data.index == pb-&gt;data.index)</span><br><span class="line">        &#123;</span><br><span class="line">            pa-&gt;data.coef += pb-&gt;data.coef;</span><br><span class="line">            pc-&gt;next = pa;</span><br><span class="line">            pc = pc-&gt;next;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">            pb = pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pc-&gt;next = (pa ? pa : pb);</span><br><span class="line">    <span class="keyword">delete</span> Lb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>图书管理系统 - 单链表实现</strong></em></p><p><em>结构体定义</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Book</span></span><br><span class="line">&#123;</span><br><span class="line">    string isbn;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">float</span> price;</span><br><span class="line">&#125; ElemType;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Lnode</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    Lnode *next;</span><br><span class="line">&#125; *LinkList;</span><br></pre></td></tr></table></figure><p>其他操作，例如对图书的添加、删除、查找等操作，和单链表基本上一样的，这里就不赘述了。不过，受到《C++ Primer》的启发，我们可以添加两个这样的函数，简化程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用read函数向ElemType的对象写入数据</span></span><br><span class="line"><span class="function">istream &amp;<span class="title">read</span><span class="params">(istream &amp;in, ElemType &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    in&gt;&gt;rhs.isbn;</span><br><span class="line">    in&gt;&gt;rhs.name;</span><br><span class="line">    in&gt;&gt;rhs.price;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用print函数打印ElemType对象</span></span><br><span class="line"><span class="function">ostream &amp;<span class="title">print</span><span class="params">(ostream &amp;out, ElemType &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    out&lt;&lt;rhs.isbn&lt;&lt;<span class="string">&quot; &quot;</span></span><br><span class="line">        &lt;&lt;rhs.name&lt;&lt;<span class="string">&quot; &quot;</span></span><br><span class="line">        &lt;&lt;rhs.price&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何使用这两个函数？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读</span></span><br><span class="line"><span class="built_in">read</span>(cin, L-&gt;data);</span><br><span class="line"><span class="comment">//写</span></span><br><span class="line"><span class="built_in">print</span>(cout, L-&gt;data);</span><br></pre></td></tr></table></figure><p>本篇完~</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数学公式的插入与排版</title>
      <link href="/2025/01/23/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%9A%84%E6%8F%92%E5%85%A5%E4%B8%8E%E6%8E%92%E7%89%88/"/>
      <url>/2025/01/23/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%9A%84%E6%8F%92%E5%85%A5%E4%B8%8E%E6%8E%92%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1>数学公式的插入与排版</h1><p>使用$$加在公式两边</p><p>_下标 ^上标  \\换行</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>=</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">x+y=10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>分数\frac{分子}{分母}</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">x^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></p><p>x^n</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>x_n</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>x</mi><mn>2</mn><mrow><mn>2</mn><mi>x</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">x_2^{2x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>x_2^{2x}</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mroot><mi>n</mi><mi>m</mi></mroot></mrow><annotation encoding="application/x-tex">\sqrt[m]{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.1908em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6103em;"><span style="top:-2.895em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span></span></span></span></span></p><p>\sqrt[m]{n}</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>≠</mo><mspace linebreak="newline"></mspace><mo>≈</mo><mspace linebreak="newline"></mspace><mo>≤</mo><mspace linebreak="newline"></mspace><mo>≥</mo><mspace linebreak="newline"></mspace><mo>×</mo><mspace linebreak="newline"></mspace><mo>÷</mo><mspace linebreak="newline"></mspace><mo>±</mo><mspace linebreak="newline"></mspace><munderover><mo>∑</mo><mi>m</mi><mi>n</mi></munderover><mspace linebreak="newline"></mspace><munderover><mo>∏</mo><mi>m</mi><mi>n</mi></munderover><mspace linebreak="newline"></mspace><munderover><mo>∐</mo><mi>m</mi><mi>n</mi></munderover><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\not=\\\approx\\\leq\\\geq\\\times\\\div\\\pm\\\sum_m^n\\\prod_m^n\\\coprod_m^n\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.4831em;"></span><span class="mrel">≈</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≤</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≥</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">×</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">÷</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">±</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.9014em;vertical-align:-1.25em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.9014em;vertical-align:-1.25em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.9014em;vertical-align:-1.25em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∐</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span><span class="mspace newline"></span></span></span></span></p><p>\not= 不等于<br>\approx 约等于<br>\leq 小于等于<br>\geq 大于等于<br>\times 乘<br>\div 除以<br>\pm 正负<br>\sum_m^n 累加<br>\prod_m^n 累乘<br>\coprod_m^n 累除</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mspace linebreak="newline"></mspace><mi>π</mi></mrow><annotation encoding="application/x-tex">\sin\\\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6679em;"></span><span class="mop">sin</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span></span></p><p>\sin</p><p>\pi</p><p>\infty\\\int_a^b\\\iiiint\\y\prime\\\lim\\\emptyset\\\in\\\notin\\\supset\\\supseteq\\\bigcup\\\bigcap\\\log\\ln\\\alpha\\\beta\\\gamma\\\delta\\\theta</p><p>(仅展示一部分)</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></msubsup><msup><mi>e</mi><mrow><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msup><mi>d</mi><mi>x</mi><mo>=</mo><mfrac><msqrt><mi>π</mi></msqrt><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\int_0^{+\infty}e^{-x^2}dx=\frac{\sqrt\pi}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4332em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5212em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4773em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;padding-left:0.833em;">π</span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>\int_0^{+\infty}e^{-x^2}dx=\frac{\sqrt\pi}{2}</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>n</mi><mo>→</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mn>1</mn><mi>n</mi></mfrac><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\lim_{n\rightarrow+\infty}\frac{1}{n}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0798em;vertical-align:-0.7583em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7583em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><p>\lim_{n\rightarrow+\infty}\frac{1}{n}=0</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>n</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><munderover><mo>∑</mo><mn>1</mn><mi>n</mi></munderover><mfrac><mn>1</mn><mi>n</mi></mfrac><mi>f</mi><mo stretchy="false">(</mo><mfrac><mi>k</mi><mi>n</mi></mfrac><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\lim_{n\rightarrow\infty}\sum_1^n\frac{1}{n}f(\frac{k}{n})=\int_0^1f(x)dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9185em;vertical-align:-1.2671em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-2.4em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8829em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2671em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.476em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.564em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></span></p><p>\lim_{n\rightarrow\infty}\sum_1^n\frac{1}{n}f(\frac{k}{n})=\int_0^1f(x)dx</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><msub><mi>x</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><mn>1</mn><msub><mi>x</mi><mn>2</mn></msub></mfrac><mo>+</mo><mo>⋯</mo><mo>+</mo><mfrac><mn>1</mn><msub><mi>x</mi><mi>n</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">f(x)=\frac{1}{x_1}+\frac{1}{x_2}+\cdots+\frac{1}{x_n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1574em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.1574em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.1574em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>f(x)=\frac{1}{x_1}+\frac{1}{x_2}+\cdots+\frac{1}{x_n}</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> MarkDown语法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>插入超链接,图片,表格</title>
      <link href="/2025/01/23/%E6%8F%92%E5%85%A5%E8%B6%85%E9%93%BE%E6%8E%A5-%E5%9B%BE%E7%89%87-%E8%A1%A8%E6%A0%BC/"/>
      <url>/2025/01/23/%E6%8F%92%E5%85%A5%E8%B6%85%E9%93%BE%E6%8E%A5-%E5%9B%BE%E7%89%87-%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h1>插入超链接,图片,表格</h1><h2 id="超链接">超链接</h2><p>形式[文本](网址)</p><p>想要了解更多请前往[我的博客](<a href="https://hsezlyc.github.io/">Anon Toyko</a>)</p><p>当多个网址时可以使用变量</p><p>[想要][a][了解][b]更多请前往[我的博客][c]<br><a href="http://www.baidu.com">想要</a>去<a href="http://www.bilibili.com">了解</a>更多请前往<a href="https://hsezlyc.github.io/">我的博客</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[a]: http://www.baidu.com</span><br><span class="line">[b]: http://www.bilibili.com</span><br><span class="line">[c]: https://hsezlyc.github.io/</span><br></pre></td></tr></table></figure><h3 id="脚注">脚注</h3><p>文本后加[^n]</p><p>想要购买请前往我们的官网<a href="%E6%88%91%E6%98%AF%E8%84%9A%E6%B3%A8">^1</a></p><h3 id="图片">图片</h3><p>![名字](网络或本地地址)</p><p>与超链接相同可以使用变量</p><h2 id="表格">表格</h2><p>使用|表示表格边框</p><p>使用| — |来给表头封底，其余内容不需封底</p><table><thead><tr><th>姓名</th><th>年龄</th></tr></thead><tbody><tr><td>千早爱音</td><td>17</td></tr></tbody></table><p>表头下</p><p>|:------|表示左对齐</p><p>|:-------:|表示居中</p><p>|-------:|表示右对齐</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> MarkDown语法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>引用文本</title>
      <link href="/2025/01/23/%E5%BC%95%E7%94%A8%E6%96%87%E6%9C%AC/"/>
      <url>/2025/01/23/%E5%BC%95%E7%94%A8%E6%96%87%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1>引用文本</h1><p>使用&gt;加空格加在文本前</p><blockquote><p>markdown的优点：启动极快、快速排版、沉浸感编辑（全程手不离开键盘，而word需要键鼠交替）、风格统一阅读舒服（基本上都用github模板）<br>markdown的缺点：排版上限低（行距、字体、格式、插入图片、表格都弱于word）</p></blockquote><p>依旧换两行以结束。</p><p>换段可以使用多行&gt;</p><p>引用块中可以嵌套其他内容</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> MarkDown语法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>有序,无序列表和勾选框</title>
      <link href="/2025/01/23/%E6%9C%89%E5%BA%8F-%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%E5%92%8C%E5%8B%BE%E9%80%89%E6%A1%86/"/>
      <url>/2025/01/23/%E6%9C%89%E5%BA%8F-%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8%E5%92%8C%E5%8B%BE%E9%80%89%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<h1>有序,无序列表和勾选框</h1><h2 id="无序列表">无序列表</h2><p>*或+或-加空格加在文本前(不能混用，可用于两种列表分开)</p><ul><li><p>我是第一项任务</p></li><li><p>二</p></li><li><p>三</p></li></ul><h2 id="有序列表">有序列表</h2><p>num.加上空格加在文本前</p><ol><li><p>第一</p></li><li><p>第二</p></li><li><p>第三</p></li></ol><h2 id="嵌套列表">嵌套列表</h2><p>在上一级列表后加一个tab(四个空格)</p><ol><li>一<ul><li>二级<ul><li>三级</li></ul></li></ul></li></ol><h2 id="列表换行">列表换行</h2><p>结束链表需要连换两行</p><ol><li>一</li></ol><p>结束</p><h2 id="勾选框">勾选框</h2><p>* [ ] 加在文本前</p><ul><li>[ ] 第一</li><li>[ ] 第二</li><li>[ ] 第三</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> MarkDown语法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码块</title>
      <link href="/2025/01/23/%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
      <url>/2025/01/23/%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1>代码块</h1><h2 id="大代码块">大代码块</h2><p>在代码前后各加```</p><p>```后面加上语言名称可以使关键词高亮，例如:c,java等</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello,World\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小代码">小代码</h2><p>使用`加在代码两侧</p><p><code>int __cdecl system(const char *_Command);</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> MarkDown语法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础语法</title>
      <link href="/2025/01/22/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/01/22/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1>基础语法</h1><p>这是文本。</p><p>\为转义字符</p><p><em>使用*加在文本两侧可以使文本斜体</em></p><p><strong>使用**加在文本两侧可以使文本加粗</strong></p><p><em><strong>使用***加在文本两侧可以使文本斜体加粗</strong></em></p><p>使用~~加在文本两侧可以使文本加上横杠</p><p><s>文本</s></p><p>空白行三个或三个以上*或_可以生成剪切线</p><p>***</p><hr><p>n个#加空格可以生成n级标题(最高六级)</p><h1>一级标题</h1><h2 id="二级">二级</h2><h3 id="三级">三级</h3><h4 id="四级">四级</h4><h5 id="五级">五级</h5>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> MarkDown语法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文件管理系统</title>
      <link href="/2025/01/19/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/01/19/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="文件管理系统"><a href="#文件管理系统" class="headerlink" title="文件管理系统"></a>文件管理系统</h1><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">void cp(char *source,char *target)&#123;</span><br><span class="line">    char x[100]=&quot;\0&quot;;</span><br><span class="line">    strcat(x,&quot;cp &quot;);</span><br><span class="line">    strcat(x,source);</span><br><span class="line">    strcat(x,&quot; &quot;);</span><br><span class="line">    strcat(x,target);</span><br><span class="line">    if(system(x)!=0)&#123;</span><br><span class="line">        printf(&quot;复制文件时出错\n&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;复制文件成功\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void rm(char *filename)&#123;</span><br><span class="line">    char x[100]=&quot;\0&quot;;</span><br><span class="line">    strcat(x,&quot;rm &quot;);</span><br><span class="line">    strcat(x,filename);</span><br><span class="line">    if(system(x)!=0)&#123;</span><br><span class="line">        printf(&quot;删除文件时出错\n&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;删除文件成功\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void compress(char *file,char *compressed)&#123;</span><br><span class="line">    char x[100]=&quot;\0&quot;;</span><br><span class="line">    strcat(x,&quot;tar -czvf &quot;);</span><br><span class="line">    strcat(x,compressed);</span><br><span class="line">    strcat(x,&quot; &quot;);</span><br><span class="line">    strcat(x,file);</span><br><span class="line">    if(system(x)!=0)&#123;</span><br><span class="line">        printf(&quot;压缩文件时出错\n&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;压缩文件成功\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void decompress(char *compressed,char *file)&#123;</span><br><span class="line">    char x[100]=&quot;\0&quot;;</span><br><span class="line">    strcat(x,&quot;tar -xzvf &quot;);</span><br><span class="line">    strcat(x,compressed);</span><br><span class="line">    strcat(x,&quot; &quot;);</span><br><span class="line">    strcat(x,file);</span><br><span class="line">    if(system(x)!=0)&#123;</span><br><span class="line">        printf(&quot;解压文件时出错\n&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;解压文件成功\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char command[100]=&quot;\0&quot;;</span><br><span class="line"></span><br><span class="line">    printf(&quot;Please input your command:\n&quot;);</span><br><span class="line">    printf(&quot;1. COPY: cp &lt;source file&gt; &lt;target file&gt;\n&quot;);</span><br><span class="line">    printf(&quot;2. DELETE: rm &lt;filename&gt;\n&quot;);</span><br><span class="line">    printf(&quot;3. COMPRESS: compress &lt;filename&gt; &lt;compressed package name&gt;\n&quot;);</span><br><span class="line">    printf(&quot;4. DECOMPRESS: decompress &lt;compressed package name&gt; &lt;target directory&gt;\n&quot;);</span><br><span class="line">    printf(&quot;5. EXIT: exit\n&quot;);</span><br><span class="line">    printf(&quot;Please input your command:)\n&quot;);</span><br><span class="line"></span><br><span class="line">    while(1)&#123;</span><br><span class="line">        scanf(&quot;%s&quot;,command);</span><br><span class="line">        if(strcmp(command,&quot;exit&quot;)==0)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;else if(strcmp(command,&quot;cp&quot;)==0)&#123;</span><br><span class="line">            char source[100],target[100];</span><br><span class="line">            scanf(&quot;%s %s&quot;,source,target);</span><br><span class="line">            cp(source,target);</span><br><span class="line">        &#125;else if(strcmp(command,&quot;rm&quot;)==0)&#123;</span><br><span class="line">            char filename[100];</span><br><span class="line">            scanf(&quot;%s&quot;,filename);</span><br><span class="line">            rm(filename);</span><br><span class="line">        &#125;else if(strcmp(command,&quot;compress&quot;)==0)&#123;</span><br><span class="line">            char file[100],compressed[100];</span><br><span class="line">            scanf(&quot;%s %s&quot;,file,compressed);</span><br><span class="line">            compress(file,compressed);</span><br><span class="line">        &#125;else if(strcmp(command,&quot;decompress&quot;)==0)&#123;</span><br><span class="line">            char compressed[100],file[100];</span><br><span class="line">            scanf(&quot;%s %s&quot;,compressed,file);</span><br><span class="line">            decompress(compressed,file);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            printf(&quot;Error Command\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="技术点总结"><a href="#技术点总结" class="headerlink" title="技术点总结"></a>技术点总结</h2><h3 id="1、system函数"><a href="#1、system函数" class="headerlink" title="1、system函数"></a>1、system函数</h3><p><code>int __cdecl system(const char *_Command);</code></p><p>system函数接收一个字符串参数，并将该字符串写入控制台，通过控制台来执行该字符串的命令，当命令被成功执行时返回0，当命令未被成功执行时返回非零值。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
          <category> 大作业 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2025/01/19/note/"/>
      <url>/2025/01/19/note/</url>
      
        <content type="html"><![CDATA[<h1 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h1><h2 id="（一）基本操作"><a href="#（一）基本操作" class="headerlink" title="（一）基本操作"></a>（一）基本操作</h2><h3 id="1-初始化仓库"><a href="#1-初始化仓库" class="headerlink" title="1. 初始化仓库"></a>1. 初始化仓库</h3><p>在项目目录下执行 <code>git init</code> 命令，会在当前目录下创建一个 <code>.git</code> 子目录，该目录包含了 Git 仓库的所有必要文件，如对象数据库、引用等，标志着 Git 仓库的初始化完成。</p><h3 id="2-添加文件到暂存区"><a href="#2-添加文件到暂存区" class="headerlink" title="2. 添加文件到暂存区"></a>2. 添加文件到暂存区</h3><p>使用 <code>git add &lt;file&gt;</code> 命令将文件添加到暂存区（Stage）。暂存区是 Git 工作流程中的一个中间区域，用于存放即将提交到仓库的文件更改。</p><h3 id="3-提交更改到仓库"><a href="#3-提交更改到仓库" class="headerlink" title="3. 提交更改到仓库"></a>3. 提交更改到仓库</h3><p>执行 <code>git commit -m &quot;commit message&quot;</code> 命令将暂存区的更改提交到本地仓库。其中，“commit message”是对本次提交的描述，清晰的提交信息有助于团队成员了解代码更改的内容和目的。</p><h3 id="4-查看状态"><a href="#4-查看状态" class="headerlink" title="4. 查看状态"></a>4. 查看状态</h3><p><code>git status</code> 命令用于查看当前工作目录和暂存区的状态，包括哪些文件被修改、哪些文件已添加到暂存区、哪些文件未被跟踪等。</p><h3 id="5-查看提交历史"><a href="#5-查看提交历史" class="headerlink" title="5. 查看提交历史"></a>5. 查看提交历史</h3><p><code>git log</code> 命令用于查看项目的提交历史记录，包括提交的作者、日期、提交信息等。通过提交历史，可以了解项目的演进过程，方便回溯和查找特定的代码更改。</p><h2 id="（二）时光机穿梭"><a href="#（二）时光机穿梭" class="headerlink" title="（二）时光机穿梭"></a>（二）时光机穿梭</h2><h3 id="1-查看提交历史"><a href="#1-查看提交历史" class="headerlink" title="1.查看提交历史"></a>1.查看提交历史</h3><p>在进行版本回退之前，需要先查看提交历史，以确定要回退到哪个版本。使用 <code>git log</code> 命令可以查看从最近到最远的提交日志，包括 commit id、提交人、日期等信息。如果输出信息太多，可以加上 <code>--pretty=oneline</code> 参数，使查询的版本排版更整洁，易于观看。</p><h3 id="2-回退到上一个版本"><a href="#2-回退到上一个版本" class="headerlink" title="2.回退到上一个版本"></a>2.回退到上一个版本</h3><p>如果要回退到上一个版本，可以使用 <code>git reset --hard HEAD^</code> 命令。其中，<code>HEAD^</code> 表示上一个版本，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><h3 id="3-回退到指定版本"><a href="#3-回退到指定版本" class="headerlink" title="3.回退到指定版本"></a>3.回退到指定版本</h3><p>如果要回退到指定的版本，可以使用 <code>git reset --hard commit_id</code> 命令。其中，<code>commit_id</code> 是要回退到的版本的 commit id。</p><h3 id="4-查看命令历史"><a href="#4-查看命令历史" class="headerlink" title="4.查看命令历史"></a>4.查看命令历史</h3><p>如果回退后想恢复到新版本，但忘记了新版本的 commit id，可以使用 <code>git reflog</code> 命令查看命令历史。<code>git reflog</code> 会显示每一次命令的版本相关信息，包括 commit id、提交人、日期等，即使被回退放弃过的版本相关信息也会显示。</p><h2 id="（三）远程仓库"><a href="#（三）远程仓库" class="headerlink" title="（三）远程仓库"></a>（三）远程仓库</h2><h4 id="1-添加远程仓库"><a href="#1-添加远程仓库" class="headerlink" title="1. 添加远程仓库"></a>1. 添加远程仓库</h4><p>执行 <code>git remote add &lt;remote-name&gt; &lt;url&gt;</code> 命令添加一个远程仓库。远程仓库通常位于服务器上，用于团队成员之间的代码共享和协作。</p><h4 id="2-从远程仓库克隆"><a href="#2-从远程仓库克隆" class="headerlink" title="2. 从远程仓库克隆"></a>2. 从远程仓库克隆</h4><p>使用 <code>git clone &lt;url&gt;</code> 命令可以从远程仓库克隆一个完整的本地副本。克隆操作会创建一个新的本地仓库，并将远程仓库中的所有文件、分支、提交历史等信息都复制到本地。</p><h4 id="3-推送代码到远程仓库"><a href="#3-推送代码到远程仓库" class="headerlink" title="3. 推送代码到远程仓库"></a>3. 推送代码到远程仓库</h4><p>执行 <code>git push</code> 命令将本地分支的更改推送到远程仓库。这样，其他团队成员就可以获取到最新的代码更改。</p><h2 id="（四）分支管理"><a href="#（四）分支管理" class="headerlink" title="（四）分支管理"></a>（四）分支管理</h2><h3 id="1-创建分支"><a href="#1-创建分支" class="headerlink" title="1. 创建分支"></a>1. 创建分支</h3><p>使用 <code>git branch &lt;branch-name&gt;</code> 命令创建一个新的分支。分支是 Git 中用于并行开发的重要功能，不同的分支可以独立进行开发，互不影响。</p><p>执行 <code>git checkout &lt;branch-name&gt;</code> 命令切换到指定的分支。切换分支后，工作目录中的文件会相应地更新为该分支的最新版本。</p><p>当一个分支的开发完成后，可以使用 <code>git merge &lt;branch-name&gt;</code> 命令将其合并回主分支或其他目标分支。合并操作会将分支上的更改整合到目标分支中，实现代码的融合。</p><h3 id="2-切换分支"><a href="#2-切换分支" class="headerlink" title="2. 切换分支"></a>2. 切换分支</h3><p>执行 <code>git checkout &lt;branch-name&gt;</code>或 <code>git switch &lt;branch-name&gt;</code>命令切换到指定的分支。切换分支后，工作目录中的文件会相应地更新为该分支的最新版本。</p><h3 id="3-合并分支"><a href="#3-合并分支" class="headerlink" title="3. 合并分支"></a>3. 合并分支</h3><p>当一个分支的开发完成后，可以使用 <code>git merge &lt;branch-name&gt;</code> 命令将其合并回主分支或其他目标分支。合并操作会将分支上的更改整合到目标分支中，实现代码的融合。</p><h3 id="4-删除分支"><a href="#4-删除分支" class="headerlink" title="4. 删除分支"></a>4. 删除分支</h3><p>使用 <code>git branch -d &lt;branch-name&gt;</code> 命令删除已经合并过的分支，或者使用 <code>git branch -D &lt;branch-name&gt;</code> 强制删除未合并的分支。删除分支后，该分支上的代码更改将不再单独存在，但已经合并到其他分支的更改仍然保留。</p><p>使用 <code>git pull &lt;remote-name&gt; &lt;branch-name&gt;</code> 命令从远程仓库拉取代码并合并到本地分支。当远程仓库有新的更改时，通过拉取操作可以将这些更改同步到本地，保持本地代码与远程仓库的一致性。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/01/19/hello-world/"/>
      <url>/2025/01/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }/* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {  animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {  animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {  animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {  animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {  0% {    text-shadow: #5636ed 0 0 15px;  }  12.5% {    text-shadow: #11ee5e 0 0 15px;  }  25% {    text-shadow: #f14747 0 0 15px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 15px;  }  50% {    text-shadow: #b347f1 0 0 15px;  }  62.5% {    text-shadow: #002afa 0 0 15px;  }  75% {    text-shadow: #ed709b 0 0 15px;  }  87.5% {    text-shadow: #39c5bb 0 0 15px;  }  100% {    text-shadow: #5636ed 0 0 15px;  }}@keyframes light_10px {  0% {    text-shadow: #5636ed 0 0 10px;  }  12.5% {    text-shadow: #11ee5e 0 0 10px;  }  25% {    text-shadow: #f14747 0 0 10px;  }  37.5% {    text-shadow: #f1a247 0 0 10px;  }  50% {    text-shadow: #f1ee47 0 0 10px;  }  50% {    text-shadow: #b347f1 0 0 10px;  }  62.5% {    text-shadow: #002afa 0 0 10px;  }  75% {    text-shadow: #ed709b 0 0 10px;  }  87.5% {    text-shadow: #39c5bb 0 0 10px;  }  100% {    text-shadow: #5636ed 0 0 10px;  }}@keyframes light_5px {  0% {    text-shadow: #5636ed 0 0 5px;  }  12.5% {    text-shadow: #11ee5e 0 0 5px;  }  25% {    text-shadow: #f14747 0 0 5px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 5px;  }  50% {    text-shadow: #b347f1 0 0 5px;  }  62.5% {    text-shadow: #002afa 0 0 5px;  }  75% {    text-shadow: #ed709b 0 0 5px;  }  87.5% {    text-shadow: #39c5bb 0 0 5px;  }  100% {    text-shadow: #5636ed 0 0 5px;  }}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime.css"/>
      <url>/css/runtime.css</url>
      
        <content type="html"><![CDATA[/*电子钟字体*/@font-face {  font-family: 'UnidreamLED';  src: url("https://cdn.jsdelivr.net/npm/akilar-candyassets/fonts/UnidreamLED.ttf");  font-display: swap;}div#runtime {  width: 180px;  margin: auto;  color: #fff;  padding-inline: 5px;  border-radius: 10px;  background-color: rgba(0,0,0,0.7);  font-family: 'UnidreamLED';}[data-theme="dark"] div#runtime {  color: #28b4c8;  box-shadow: 0 0 5px rgba(28,69,218,0.71);  animation: flashlight 1s linear infinite alternate;}/*悬停显示徽标提示语*/a.github-badge:hover:before {  position: fixed;  width: fit-content;  margin: auto;  left: 0;  right: 0;  top: 10%;  border-radius: 10px;  text-align: center;  z-index: 100;  content: attr(data-title);  font-size: 20px;  color: #fff;  padding: 10px;  background-color: var(--text-bg-hover);}[data-theme=dark] a.github-badge:hover:before {  background-color: rgba(18,18,18,0.8);}@-moz-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-webkit-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@-o-keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}@keyframes flashlight {  from {    box-shadow: 0 0 5px #1478d2;  }  to {    box-shadow: 0 0 2px #1478d2;  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[setInterval(() => {  let create_time = Math.round(new Date('2025-01-19 16:00:00').getTime() / 1000); //在此行修改建站时间  let timestamp = Math.round((new Date().getTime()) / 1000);  let second = timestamp - create_time;  let time = new Array(0, 0, 0, 0, 0);  var nol = function(h){    return h>9?h:'0'+h;  }  if (second >= 365 * 24 * 3600) {    time[0] = parseInt(second / (365 * 24 * 3600));    second %= 365 * 24 * 3600;  }  if (second >= 24 * 3600) {    time[1] = parseInt(second / (24 * 3600));    second %= 24 * 3600;  }  if (second >= 3600) {    time[2] = nol(parseInt(second / 3600));    second %= 3600;  }  if (second >= 60) {    time[3] = nol(parseInt(second / 60));    second %= 60;  }  if (second > 0) {    time[4] = nol(second);  }  if ((Number(time[2])<22) && (Number(time[2])>7)){    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/糖果屋-营业中-6adea8?style=social&logo=cakephp' title='距离百年老店也就差不到一百年~'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  else{    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/糖果屋-打烊了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  document.getElementById("workboard").innerHTML = currentTimeHtml;}, 1000);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
